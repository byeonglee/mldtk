#superc_args -printAST
ExternalDeclarationList(
  Conditional(
    1,
    FunctionDefinition(
      FunctionDeclarator(
        BasicDeclarationSpecifier(
          DeclarationQualifierList(
            Conditional(
              1,
              StorageClass(
                xtc.lang.cpp.Syntax$Language(
                  "static"
                )
              )
            ),
            Conditional(
              1,
              DeclarationQualifier(
                TypeQualifier(
                  FunctionSpecifier(
                    xtc.lang.cpp.Syntax$Language(
                      "inline"
                    )
                  )
                )
              )
            )
          ),
          BasicTypeName(
            xtc.lang.cpp.Syntax$Language(
              "int"
            )
          )
        ),
        PostfixIdentifierDeclarator(
          SimpleDeclarator(
            xtc.lang.cpp.Syntax$Text(
              "NCR5380_pread"
            )
          ),
          PostfixingAbstractDeclarator(
            ParameterTypeListOpt(
              ParameterTypeList(
                ParameterList(
                  Conditional(
                    1,
                    ParameterDeclaration(
                      SUETypeSpecifier(
                        ElaboratedTypeName(
                          StructOrUnionSpecifier(
                            StructOrUnion(
                              xtc.lang.cpp.Syntax$Language(
                                "struct"
                              )
                            ),
                            IdentifierOrTypedefName(
                              xtc.lang.cpp.Syntax$Text(
                                "Scsi_Host"
                              )
                            )
                          )
                        )
                      ),
                      UnaryIdentifierDeclarator(
                        xtc.lang.cpp.Syntax$Language(
                          "*"
                        ),
                        SimpleDeclarator(
                          xtc.lang.cpp.Syntax$Text(
                            "instance"
                          )
                        )
                      )
                    )
                  ),
                  Conditional(
                    1,
                    ParameterDeclaration(
                      BasicTypeSpecifier(
                        BasicTypeSpecifier(
                          BasicTypeName(
                            xtc.lang.cpp.Syntax$Language(
                              "unsigned"
                            )
                          )
                        ),
                        BasicTypeName(
                          xtc.lang.cpp.Syntax$Language(
                            "char"
                          )
                        )
                      ),
                      UnaryIdentifierDeclarator(
                        xtc.lang.cpp.Syntax$Language(
                          "*"
                        ),
                        SimpleDeclarator(
                          xtc.lang.cpp.Syntax$Text(
                            "dst"
                          )
                        )
                      )
                    )
                  ),
                  Conditional(
                    1,
                    ParameterDeclaration(
                      BasicTypeSpecifier(
                        BasicTypeName(
                          xtc.lang.cpp.Syntax$Language(
                            "int"
                          )
                        )
                      ),
                      SimpleDeclarator(
                        xtc.lang.cpp.Syntax$Text(
                          "len"
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      ),
      DeclarationOrStatementList(
        Conditional(
          !MACRO,
          IterationStatement(
            xtc.lang.cpp.Syntax$Language(
              "while"
            ),
            UnaryExpression(
              Unaryoperator(
                xtc.lang.cpp.Syntax$Language(
                  "!"
                )
              ),
              AndExpression(
                FunctionCall(
                  PrimaryIdentifier(
                    xtc.lang.cpp.Syntax$Text(
                      "readb"
                    )
                  ),
                  ArgumentExpressionList(
                    Conditional(
                      !MACRO,
                      AdditiveExpression(
                        PrimaryIdentifier(
                          xtc.lang.cpp.Syntax$Text(
                            "base"
                          )
                        ),
                        xtc.lang.cpp.Syntax$Language(
                          "+"
                        ),
                        PrimaryIdentifier(
                          xtc.lang.cpp.Syntax$Text(
                            "T_STATUS_REG_OFFSET"
                          )
                        )
                      )
                    )
                  )
                ),
                xtc.lang.cpp.Syntax$Language(
                  "&"
                ),
                PrimaryIdentifier(
                  xtc.lang.cpp.Syntax$Text(
                    "T_ST_RDY"
                  )
                )
              )
            ),
            ExpressionStatement(
              FunctionCall(
                PrimaryIdentifier(
                  xtc.lang.cpp.Syntax$Text(
                    "barrier"
                  )
                )
              )
            )
          )
        ),
        Conditional(
          1,
          IterationStatement(
            Conditional(
              !MACRO,
              xtc.lang.cpp.Syntax$Language(
                "for"
              ),
              MACRO,
              xtc.lang.cpp.Syntax$Language(
                "for"
              )
            ),
            Conditional(
              !MACRO,
              PrimaryIdentifier(
                xtc.lang.cpp.Syntax$Text(
                  "i"
                )
              ),
              MACRO,
              PrimaryIdentifier(
                xtc.lang.cpp.Syntax$Text(
                  "i"
                )
              )
            ),
            Conditional(
              !MACRO,
              UnaryExpression(
                xtc.lang.cpp.Syntax$Language(
                  "--"
                ),
                PrimaryIdentifier(
                  xtc.lang.cpp.Syntax$Text(
                    "i"
                  )
                )
              ),
              MACRO,
              UnaryExpression(
                xtc.lang.cpp.Syntax$Language(
                  "--"
                ),
                PrimaryIdentifier(
                  xtc.lang.cpp.Syntax$Text(
                    "i"
                  )
                )
              )
            ),
            CompoundStatement(
              DeclarationOrStatementList(
                Conditional(
                  1,
                  Conditional(
                    !MACRO,
                    DeclarationOrStatementList(),
                    MACRO,
                    DeclarationOrStatementList(
                      Conditional(
                        MACRO,
                        IterationStatement(
                          xtc.lang.cpp.Syntax$Language(
                            "while"
                          ),
                          UnaryExpression(
                            Unaryoperator(
                              xtc.lang.cpp.Syntax$Language(
                                "!"
                              )
                            ),
                            AndExpression(
                              FunctionCall(
                                PrimaryIdentifier(
                                  xtc.lang.cpp.Syntax$Text(
                                    "readb"
                                  )
                                ),
                                ArgumentExpressionList(
                                  Conditional(
                                    MACRO,
                                    AdditiveExpression(
                                      PrimaryIdentifier(
                                        xtc.lang.cpp.Syntax$Text(
                                          "base"
                                        )
                                      ),
                                      xtc.lang.cpp.Syntax$Language(
                                        "+"
                                      ),
                                      PrimaryIdentifier(
                                        xtc.lang.cpp.Syntax$Text(
                                          "T_STATUS_REG_OFFSET"
                                        )
                                      )
                                    )
                                  )
                                )
                              ),
                              xtc.lang.cpp.Syntax$Language(
                                "&"
                              ),
                              PrimaryIdentifier(
                                xtc.lang.cpp.Syntax$Text(
                                  "T_ST_RDY"
                                )
                              )
                            )
                          ),
                          ExpressionStatement(
                            FunctionCall(
                              PrimaryIdentifier(
                                xtc.lang.cpp.Syntax$Text(
                                  "barrier"
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                Conditional(
                  1,
                  ExpressionStatement(
                    AssignmentExpression(
                      UnaryExpression(
                        Unaryoperator(
                          xtc.lang.cpp.Syntax$Language(
                            "*"
                          )
                        ),
                        Increment(
                          PrimaryIdentifier(
                            xtc.lang.cpp.Syntax$Text(
                              "d"
                            )
                          ),
                          xtc.lang.cpp.Syntax$Language(
                            "++"
                          )
                        )
                      ),
                      FunctionCall(
                        PrimaryIdentifier(
                          xtc.lang.cpp.Syntax$Text(
                            "readb"
                          )
                        ),
                        ArgumentExpressionList(
                          Conditional(
                            1,
                            PrimaryIdentifier(
                              xtc.lang.cpp.Syntax$Text(
                                "reg"
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)
