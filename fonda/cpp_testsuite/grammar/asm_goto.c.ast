#superc_args -printAST
ExternalDeclarationList(
  Conditional(
    1,
    FunctionDefinition(
      FunctionDeclarator(
        BasicTypeSpecifier(
          BasicTypeName(
            xtc.lang.cpp.Syntax$Language(
              "int"
            )
          )
        ),
        PostfixIdentifierDeclarator(
          SimpleDeclarator(
            xtc.lang.cpp.Syntax$Text(
              "main"
            )
          )
        )
      ),
      DeclarationOrStatementList(
        Conditional(
          1,
          Declaration(
            DeclaringList(
              BasicTypeSpecifier(
                BasicTypeName(
                  xtc.lang.cpp.Syntax$Language(
                    "int"
                  )
                )
              ),
              SimpleDeclarator(
                xtc.lang.cpp.Syntax$Text(
                  "bit"
                )
              ),
              InitializerOpt(
                Initializer(
                  Constant(
                    xtc.lang.cpp.Syntax$Text(
                      "4096"
                    )
                  )
                )
              )
            )
          )
        ),
        Conditional(
          1,
          AssemblyStatement(
            AsmKeyword(
              xtc.lang.cpp.Syntax$Language(
                "asm"
              )
            ),
            xtc.lang.cpp.Syntax$Language(
              "goto"
            ),
            AssemblyGotoargument(
              StringLiteralList(
                Conditional(
                  1,
                  xtc.lang.cpp.Syntax$Text(
                    "\"1: jmp %l[t_no]\\n\""
                  )
                ),
                Conditional(
                  1,
                  xtc.lang.cpp.Syntax$Text(
                    "\"2:\\n\""
                  )
                ),
                Conditional(
                  1,
                  xtc.lang.cpp.Syntax$Text(
                    "\".section .altinstructions,\\\"a\\\"\\n\""
                  )
                ),
                Conditional(
                  1,
                  xtc.lang.cpp.Syntax$Text(
                    "\" .long 1b - .\\n\""
                  )
                ),
                Conditional(
                  1,
                  xtc.lang.cpp.Syntax$Text(
                    "\" .long 0\\n\""
                  )
                ),
                Conditional(
                  1,
                  xtc.lang.cpp.Syntax$Text(
                    "\" .word %P0\\n\""
                  )
                ),
                Conditional(
                  1,
                  xtc.lang.cpp.Syntax$Text(
                    "\" .byte 2b - 1b\\n\""
                  )
                ),
                Conditional(
                  1,
                  xtc.lang.cpp.Syntax$Text(
                    "\" .byte 0\\n\""
                  )
                ),
                Conditional(
                  1,
                  xtc.lang.cpp.Syntax$Text(
                    "\".previous\\n\""
                  )
                )
              ),
              AssemblyoperandsOpt(
                Assemblyoperands(
                  Conditional(
                    1,
                    Assemblyoperand(
                      StringLiteralList(
                        Conditional(
                          1,
                          xtc.lang.cpp.Syntax$Text(
                            "\"i\""
                          )
                        )
                      ),
                      PrimaryIdentifier(
                        xtc.lang.cpp.Syntax$Text(
                          "bit"
                        )
                      )
                    )
                  )
                )
              ),
              AssemblyJumpLabels(
                Identifier(
                  xtc.lang.cpp.Syntax$Text(
                    "t_no"
                  )
                )
              )
            )
          )
        ),
        Conditional(
          1,
          JumpStatement(
            xtc.lang.cpp.Syntax$Language(
              "return"
            ),
            Constant(
              xtc.lang.cpp.Syntax$Text(
                "0"
              )
            )
          )
        ),
        Conditional(
          1,
          LabeledStatement(
            IdentifierOrTypedefName(
              xtc.lang.cpp.Syntax$Text(
                "t_no"
              )
            ),
            JumpStatement(
              xtc.lang.cpp.Syntax$Language(
                "return"
              ),
              Constant(
                xtc.lang.cpp.Syntax$Text(
                  "1"
                )
              )
            )
          )
        )
      )
    )
  )
)
